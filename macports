#!/bin/bash
# Use built in bash to avoid issues with deleting the macports version

set -euo pipefail
IFS=$'\n\t'
shopt -s nullglob
shopt -s nocaseglob

# kill all child proceses quietly
kill_spawn() {
  for SPAWN in $(pgrep -g $$); do
kill -9 $SPAWN
wait $SPAWN 2>/dev/null
#kill -s SIGTERM $SPAWN
#    sudo kill -9 $SPAWN  2>/dev/null
#    wait $SPAWN 2>/dev/null
  done
}

# kill_spawn on exit and ctrl-c
trap kill_spawn EXIT SIGINT

# Define global variables and set defaults
CLEANUP_MACPORTS=1
INSTALL_MACPORTS=1
PORTLIST_MACPORTS=1
UPGRADE_PORTS=1

# print out usage
usage() {
  cat <<EOF
USAGE: ./macports -c -i -p
OPTIONS:
   -c    Fully remove macports
   -i    Install macports and ports tree from git
   -p    Install ports from file list
   -u    Upgrade installed ports
   -h    Help
EOF
  exit 0
}

# process options and arguments
while getopts "hcipu" OPTION; do
  case $OPTION in
  h) usage ;;
  c) CLEANUP_MACPORTS=0 ;;
  i) INSTALL_MACPORTS=0 ;;
  p) PORTLIST_MACPORTS=0 ;;
  u) UPGRADE_PORTS=0 ;;
  esac
done

# get sudo
sudo -p "Provide sudo password: " echo "Elevated"

# background sudo revalidate until script ends
{
  while sleep 290; do
    sudo -v
    echo -e "\nrefreshing sudo timeout"
  done
} &

cleanup_macports() {
  # remove user account
  if (dscl . -read /Users/macports >/dev/null 2>&1); then
    sudo dscl . -delete /Users/macports
  fi

  # prevent catch 22 and revert shell to /bin/bash

  # remove macports group
  if (dscl . -read /groups/macports >/dev/null 2>&1); then
    sudo dscl . -delete /groups/macports
  fi

  # build array of directorys to cleanup
  declare -a TARGET_DIRS=("/opt/local"
    "/opt/ports"
    "/opt/mports"
    "/Applications/DarwinPorts"
    "/Applications/MacPorts"
    "/Library/LaunchDaemons/org.macports.*"
    "/Library/Receipts/DarwinPorts*.pkg"
    "/Library/Receipts/MacPorts*.pkg"
    "/Library/StartupItems/DarwinPortsStartup"
    "/Library/Tcl/darwinports1.0"
    "/Library/Tcl/macports1.0"
    "~/.macports"
  )

  # figure out how to set default shell back so it's not removed

  # Loop through directories and clean them up
  for DIR in "${TARGET_DIRS[@]}"; do
    if (ls "${DIR}" 1>/dev/null 2>&1); then
      echo "removing ${DIR}"
      sudo /bin/rm -r "${DIR}"
    fi
  done

}

build_port() {
  cd /opt/mports/macports-base
  echo "Configuring and installing macports-base"
  ./configure --enable-readline
  echo "Make"
  make
  echo "make install"
  sudo make install
  echo "make distclean"
  make distclean
}

install_macports() {
  echo "Installing macports"

  # Xcode cli tools check
  if ! (xcode-select -p 1>/dev/null); then
    xcode-select --install >/dev/null 2>&1
    echo "Xcode and command line tools all need to be installed and working before running this tool."
    read -n 1 -r -s -p $'Press any key after cli tools install has completed\n'
  fi

  # setup ports directory
  if ! [[ -d /opt/mports ]]; then
    echo "Creating /opt/mports"
    sudo mkdir -p /opt/mports
    sudo chgrp admin /opt/mports
    sudo chmod g+w /opt/mports
  else
    echo "Port dir /opt/mports exists already.."
  fi

  # get macports base code
  if [[ -d /opt/mports/macports-base ]]; then
    echo "Updating ports base"
    if (git -C /opt/mports/macports-base diff-index --quiet HEAD); then
      git -C /opt/mports/macports-base pull --rebase=false
      echo "ports base updated, rebuilding now..."
      build_port
    fi
    # test if a newer version exists in the master branch and built it if so
  else
    echo "Cloning macports-base to /opt/mports/macports-base"
    git clone https://github.com/macports/macports-base.git /opt/mports/macports-base
    # git checkout v2.6.0
    echo "building ports base becasue it didin't exist"
    build_port
  fi

  # hackup zsh and bash path  so ports is in it.
  # ~/.zshenv

  # get macports ports from git
  if [[ -d /opt/mports/macports-ports ]]; then
    echo "Updating ports"
    git -C /opt/mports/macports-ports pull --rebase=false
  else
    echo "Cloning macports-ports to /opt/mports/macports-ports"
    git clone https://github.com/macports/macports-ports.git /opt/mports/macports-ports

    export PATH=/opt/local/bin:/opt/local/sbin:$PATH
    export MANPATH=/opt/local/share/man
    export DISPLAY=:0.0
    #sudo port selfupdate
  fi

  # update sources.conf
  if ! (grep -q 'opt/mports/macports-ports' /opt/local/etc/macports/sources.conf >/dev/null 2>&1); then
    echo 'Updating /opt/local/etc/macports/sources.conf'
    echo "file:///opt/mports/macports-ports [default]" | sudo tee /opt/local/etc/macports/sources.conf
  fi

  # sync the ports tree
  sudo /opt/local/bin/port sync

}

install_ports() {
  echo "Installing ports from ~/code/macports/portlist"
  # test for the provided path
  if ! [[ -e ~/code/macports/portlist ]]; then
    echo "Error: port file not found! ~/code/macports/portlist"
    exit 1
  fi

  # loop trhough the list of ports and install them
  PORTS=$(<~/code/macports/portlist)
  PORT_VARIANT=""
  read -d 'â€¢' -a PORTS <~/code/macports/portlist
  for PORT in "${PORTS[@]}"; do
    echo "installing $PORT"
    PORT_ITSELF=$(cut -d ' ' -f 1 <<<"$PORT")
    PORT_VARIANT_1=$(cut -d ' ' -f 2 <<<"$PORT")
    PORT_VARIANT_2=$(cut -d ' ' -f 3 <<<"$PORT")
    PORT_VARIANT_3=$(cut -d ' ' -f 4 <<<"$PORT")
    PORT_VARIANT_4=$(cut -d ' ' -f 5 <<<"$PORT")
    PORT_VARIANT_5=$(cut -d ' ' -f 6 <<<"$PORT")
    sudo /opt/local/bin/port -N install "$PORT_ITSELF" "$PORT_VARIANT_1" "$PORT_VARIANT_2" "$PORT_VARIANT_3" "$PORT_VARIANT_4" "$PORT_VARIANT_5" || true
  done

  ## update shell config
  # echo '/opt/local/bin/bash' >> /etc/shells
  # chsh -s /opt/local/bin/bash

  # add custom port repo
  # cat /opt/local/etc/macports/sources.conf
  # file:///opt/mports/macports-ports [default]
  # file:///Users/blake/code/blakeports

  # fixups after port installation
  sudo /opt/local/bin/port select --set python python38 || true
  sudo /opt/local/bin/port select --set python3 python38 || true
  sudo /opt/local/bin/port select --set virtualenv virtualenv38 || true
  sudo /opt/local/bin/port select --set pip pip38 || true
  sudo /opt/local/bin/port select --set pip3 pip38 || true
  sudo /opt/local/bin/port -f activate rsync || true
}

update_ports() {
  echo "Updating ports base"
  if [ $(git -C /opt/mports/macports-base pull --rebase=false | wc -l) -ne "1" ]; then
    echo "ports base updated, rebuilding now..."
    build_port
  else
    # No changes
    echo "macports base no changes from git"
  fi
  # check for ports changes
  echo "Checking for changes in ports"
  if [ $(git -C /opt/mports/macports-ports pull --rebase=false | wc -l) -ne "1" ]; then
    echo "ports updated, syncing now..."
    sudo /opt/local/bin/port sync || true
    echo "upgrading outdated ports"
    sudo /opt/local/bin/port upgrade outdated || true
    echo "uninstalling inactive ports"
    sudo /opt/local/bin/port uninstall inactive || true
  else
    # No changes
    echo "macports ports no changes from git"
  fi
}

set_default_shell() {
  echo "default shell"
  # add macports bash to /etc/shells

}

if [[ $CLEANUP_MACPORTS == 0 ]]; then
  cleanup_macports
fi

if [[ $INSTALL_MACPORTS == 0 ]]; then
  install_macports
fi

if [[ $PORTLIST_MACPORTS == 0 ]]; then
  install_ports
fi

if [[ $UPGRADE_PORTS == 0 ]]; then
  update_ports
fi

echo "End of Line..."
exit 0
